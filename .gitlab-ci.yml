stages:
 - test
 - clean-up test
 - build
 - deploy

variables:
  DOCKER_DIND_IMAGE: "docker:19.03.14-dind"
  DOCKER_IMAGE: "docker:19.03.14"
  NODE_IMAGE: "node:14-alpine"
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled

build-image-test:
  stage: test
  image: $DOCKER_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - rm .dockerignore && mv .dockerignore.prod .dockerignore
    - docker build -t ${CI_REGISTRY_IMAGE}:test --build-arg BUILD_PROD=true -f docker/Dockerfile ./

compile-typescript:
  image: $NODE_IMAGE
  script:
    - npm ci && npm i -g typescript
    - tsc
  artifacts:
    paths:
      - dist/

build-image:
  stage: build
  image: ${DOCKER_IMAGE}
  dependencies: 
    - compile-typescript
  services:
    - ${DOCKER_DIND_IMAGE}
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - rm .dockerignore && mv .dockerignore.prod .dockerignore
    - docker build -t ${CI_REGISTRY_IMAGE}:latest --build-arg NPM_GLOBAL_PACKAGES='' --build-arg BUILD_PROD=true -f docker/Dockerfile ./
    - docker push ${CI_REGISTRY_IMAGE}:latest
  only:
    - master

# Push the image to Docker Swarm as service and run a rolling deploy
push to production:
  image: $DOCKER_IMAGE
  stage: deploy
  variables:
    DOCKER_HOST: ssh://deploy@192.168.25.20
  script:
    - apk add openssh --no-cache
    - mkdir -p ~/.ssh/ &&  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - eval $(ssh-agent -s)
    - chmod 600 $SSH_KEY && ssh-add $SSH_KEY
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $CI_REGISTRY
    - docker stack deploy --prune --resolve-image=always --with-registry-auth --compose-file=docker-stack-compose.yml ${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}
  environment:
    name: api-bumblebee-fm
    url: https://api.bmbl.mijnproject.nu
  only:
    - master
